#!/usr/bin/perl
#parses the logs generated by the crazyflie and ramp_power.py
use warnings;
use strict;

use constant { TRUE => 1, FALSE => 0 };
use JSON;
my $json = JSON->new->allow_nonref;

#read in log file and divide into groups in hash ref tests
my $in_name = $ARGV[0];
$in_name =~ /^(.*)\.log/;
my $file_name =  $1;
$file_name =~ /(\d+)/;
my $file_number = $1;
my $tests = {};
my @test = ();
my @all_test = ();
my $test_num = -1;
open my $file_in, "< " . $in_name or die("invalid file");
foreach my $line (<$file_in>)
{
	if ($line =~ /^\*+Test (\d+)\*+$/)
	{
		$tests->{ $test_num >= 0 ? $test_num : "header" } = [@test];
		@test = ();
		$test_num = $1;
	}
	else 
	{
		push @test, $line;
		push @all_test, $line;
	}
}
$tests->{ ($test_num >= 0 ? $test_num : "header") } = [@test];
$tests->{"all"} = [@all_test];
close $file_in;

#parse lines and write groups into files
foreach my $t_n (keys %$tests)
{
	my $first_pwm = TRUE;
	my $first_timestamp;
	my $set_pwm = 0;
	my $csv = "time, m1_pwm, m2_pwm, m3_pwm, m4_pwm, set_pwm, calc_volt_m1, calc_volt_m2, calc_volt_m3, calc_volt_m4\n";
	foreach my $line (@{$tests->{$t_n}})
	{
		if ($line =~ /^\[(\d+)\]\[PWM\]:(.*)$/)
		{
			if ($first_pwm)
			{
				$first_timestamp = $1;
				$first_pwm = FALSE;
			}
			my $time = $1 - $first_timestamp;

			(my $data = $2) =~ s/'/"/g;
			$data = $json->decode( $data );

			my $thrust = $set_pwm * 60 / 0xFFFF;
			my $voltage = -0.0006239 * $thrust * $thrust + 0.088 * $thrust;
			my $theoretical = ($data->{'pm.vbat'}) ? ($voltage * 0xFFFF / $data->{'pm.vbat'}) : 0;
			my $calc_m1 = $data->{'pwm.m1_pwm'} * $data->{'pm.vbat'} / 0xFFFF;
			my $calc_m2 = $data->{'pwm.m2_pwm'} * $data->{'pm.vbat'} / 0xFFFF;
			my $calc_m3 = $data->{'pwm.m3_pwm'} * $data->{'pm.vbat'} / 0xFFFF;
			my $calc_m4 = $data->{'pwm.m4_pwm'} * $data->{'pm.vbat'} / 0xFFFF;
			my $csv_line = "$time, $data->{'pwm.m1_pwm'}, $data->{'pwm.m2_pwm'}, $data->{'pwm.m3_pwm'}, $data->{'pwm.m4_pwm'}, $set_pwm, $calc_m1, $calc_m2, $calc_m3, $calc_m4\n";
			$csv .= $csv_line;
		}
		elsif ($line =~ /^Readback: motorPowerSet.m1=(\d+)/)
		{	
			$set_pwm = $1;
		}
	}
	my $out_name = $file_name . "_" . $t_n . ".csv";
	open my $file_out, "> $out_name";
	print $file_out $csv;
	close $file_out;
}
